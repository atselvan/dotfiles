#!/bin/zsh

#   -------------------------------
#   ENVIRONMENT CONFIGURATION
#   -------------------------------
PATH="/usr/local/opt/openjdk/bin:/usr/local/opt/libpq/bin:$PATH"

#   -----------------------------
#   MAKE TERMINAL BETTER
#   -----------------------------

#   -----------------------------
#   ALIAS
#   -----------------------------

# Generic
alias cp='cp -iv'                           # Preferred 'cp' implementation
alias mv='mv -iv'                           # Preferred 'mv' implementation
alias mkdir='mkdir -pv'                     # Preferred 'mkdir' implementation
alias ll='ls -lrt'                          # Preferred 'll' implementation
alias ls='ls -GFh'                          # Preferred 'ls' implementation
alias cd..='cd ../'                         # Go back 1 directory level (for fast typers)
alias ..='cd ../'                           # Go back 1 directory level
alias ...='cd ../../'                       # Go back 2 directory levels
alias .3='cd ../../../'                     # Go back 3 directory levels
alias .4='cd ../../../../'                  # Go back 4 directory levels
alias .5='cd ../../../../../'               # Go back 5 directory levels
alias .6='cd ../../../../../../'            # Go back 6 directory levels
alias .7='cd ../../../../../../../'         # Go back 7 directory levels
alias .8='cd ../../../../../../../../'      # Go back 8 directory levels
alias f='open -a Finder ./'                 # Opens current directory in MacOS Finder
alias path='echo -e ${PATH//:/\\n}'         # Echo all executable Paths
alias x='exit'								# Exit from a console tab
trash () { command mv "$@" ~/.Trash ; }     # Moves a file to the MacOS trash
alias src="source ~/.zshrc"					# Reload zsh

# Open Mac Apps
alias macpass='open /Applications/MacPass.app'

# Git
alias gloc="git ls-files | xargs wc -l"		# Get lines of code in a git repository

# Golang
alias gof="go fmt ./..."							# Formats all go files in the directory
alias gox="gox -os='linux darwin' -arch='amd64' -output='bin/{{.Dir}}-{{.OS}}-{{.Arch}}'"	 # Gox Build
alias gocov='go test ./... -cover -coverprofile=c.out'	# Calculate coverage
alias gocovh='go test ./... -cover -coverprofile=c.out && go tool cover -html=c.out -o coverage.html && open coverage.html' # Calculate coverage and genrate html

# Python
# assumes:
#	- that you are in the root of your python project
#	- that you use pytest for testing your puthon code
#	- that you use coverage.py for calculating coverate
alias ave='source $(pwd)/venv/bin/activate && export PYTHONPATH=$(pwd)/src' 										# Activate python virtual environment
alias dve='deactivate && unset PYTHONPATH'																# Deactivate python virtual environment
alias pytest='pytest'																# Run tests
alias pycov="coverage run -m pytest"												# Run tests and calculate coverage
alias pycovr="pycov && coverage report --omit='venv/*'" 							# Calculate coverage and generate report
alias pycovh="pycov && coverage html --omit='venv/*' && open htmlcov/index.html" 	# Calculate coverage and generate html report

# docker
alias dco="docker-compose"		# Run docker-compose

# kubernetes
alias k="kubectl"
alias kg="kubectl get"
alias kd="kubectl describe"
alias kcg="kubectl config get-contexts"
alias kcc="kubectl config current-context"
alias kcs="kubectl config set-context"
alias kcu="kubectl config use-context"

#   lr:  Full Recursive Directory Listing
#   ------------------------------------------
alias lr='ls -R | grep ":$" | sed -e '\''s/:$//'\'' -e '\''s/[^-][^\/]*\//--/g'\'' -e '\''s/^/   /'\'' -e '\''s/-/|/'\'''

#   -----------------------------
#   FUNCTIONS
#   -----------------------------

#   gop: Set GOPATH to current directory
#   ------------------------------------------
gop(){
	wd=`pwd`
	export GOPATH=$wd
}

#   git-clean-local-branch: Cleans local git branches that are not available on the server
#   ------------------------------------------
git-clean-local-branch(){
	git fetch -p && for branch in `git branch -vv | grep ': gone]' | awk '{print $1}'`; do git branch -D $branch; done
}

#   dc: Cleans exited containers and dangling images
#   ------------------------------------------
dc(){
	docker ps -aq --no-trunc | xargs docker rm -f
	docker images -q --filter dangling=true | xargs docker rmi
}

#   sonar-cloud-scan: Scans a Sonar Cloud project
#   ------------------------------------------
sonar-cloud-scan(){
	if [ -f sonar-project.properties ]; then
		sonar-scanner -Dsonar.host.url=https://sonarcloud.io  -Dsonar.login=""
	else
		echo "./sonar-project.properties file was not found"
	fi
}

#   sonar-scan: Scans a Sonar Project
#   ------------------------------------------
sonar-scan(){
	if [ -f sonar-project.properties ]; then
		if [ -z "$1" ]; then
      		echo "Usage: sonar-scan <version>"
		else
			sonar-scanner -Dsonar.projectVersion=$1
		fi
	else
		echo "./sonar-project.properties file was not found"
	fi
}



#   ------------------------------------------
#   EOF
#   ------------------------------------------
